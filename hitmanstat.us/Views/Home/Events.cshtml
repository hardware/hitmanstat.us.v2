@model IEnumerable<hitmanstat.us.Models.Event>

@{
    ViewData["Title"] = "Events";

    var period = "day";

    if (ViewBag.days > 1)
    {
        period += "s";
    }
}

@section EventsHeader {
    <div class="alert alert-header" role="alert">
        <div class="text-center">
            <h4 class="alert-heading">LATEST DOWN OR MAINTENANCE EVENTS DETECTED</h4>
            <span class="separator"></span>
            <p class="mb-0">
                Since @ViewBag.days @period ago &nbsp; | &nbsp;
                @if (ViewBag.days == 7)
                {
                    <a asp-controller="Home" asp-action="Events" asp-route-days="1">Show last day</a>
                }
                else
                {
                    <a asp-controller="Home" asp-action="Events" asp-route-days="7">Show last week</a>
                }
            </p>
        </div>
    </div>
}

<div class="alert alert-secondary text-center alert-desc" role="alert">
    The first event appears if the service is unavailable for more than a minute. 
    Following events are delayed each time until the service becomes available again.
</div>

<table class="table table-bordered table-striped table-light">
    <thead class="thead-dark">
        <tr>
            <th scope="col">
                @Html.DisplayNameFor(model => model.Date)
            </th>
            <th scope="col" class="col1">Relative Time</th>
            <th scope="col">
                @Html.DisplayNameFor(model => model.Service)
            </th>
            <th scope="col">
                @Html.DisplayNameFor(model => model.State)
            </th>
        </tr>
    </thead>
    <tbody>
        @if (Model.Count() > 0)
        {
            string lastDate = string.Empty;

            @foreach (var item in Model)
            {
                var sdate = item.Date.ToString("dddd, MMM d, yyyy");

                if (lastDate != sdate)
                {
                    <tr>
                        <td class="table-secondary text-center" colspan="4">@sdate</td>
                    </tr>
                }

                <tr>
                    <td>@Html.DisplayFor(modelItem => item.Date) <span class="badge badge-dark">UTC</span></td>
                    <td class="col1" data-utcdate="@item.Date.ToString("yyyy-MM-ddTHH:mm:sszzz")">N/D</td>
                    <td>@Html.DisplayFor(modelItem => item.Service)</td>
                    <td>
                        @switch (item.State)
                        {
                            case "down":
                                <span class="badge badge-danger">DOWN</span>
                                break;
                            case "maintenance":
                                <span class="badge badge-warning">MAINTENANCE</span>
                                break;
                            case "unknown":
                                <span class="badge badge-secondary">UNKNOWN</span>
                                break;
                        }
                    </td>
                </tr>

                lastDate = sdate;
            }
        }
        else
        {
            <tr>
                <td class="text-center" colspan="4">No event occurred</td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    <script src="/js/catchall.bundle.js"></script>
}